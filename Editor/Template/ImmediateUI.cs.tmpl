/* 
    -This file was Code generated- 


    NOTE: We do not code generate to create fully operational code.

    Instead, our Code generation is for convenience and speed. 
    At the end of the day, only you know what your project needs. So with that comes knowing what you need too add/remove/change about the result of the Code generated output as well as to understand enough about what you want to mold and sculpt it.

    To be very clear we intentionally do not create a Monobehavior class because again this isn't "code gen and done" this is "code gen and we are iterating faster and understanding what we are doing". You still need to do the work to make your game do things!
*/
using UnityEngine;
using MoonlitSystem.UI.Immediate;

internal static class {name}Skeleton
{
    // ReSharper disable IdentifierTypo InconsistentNaming
    {id_names_and_values}
    // ReSharper restore InconsistentNaming IdentifierTypo

    internal struct Events
    {
        internal struct {name}Event
        {
            {button_events}
            {toggle_events}
            {inputfield_events}
        }

        internal {name}Event {name};
    }

    internal struct VisibleContent
    {
        internal struct {name}Visible { internal bool IsShow; }

        internal {name}Visible {name};
    }

    public static VisibleContent Visible;
    public static Events m_Events = default;

    public static void ShowModal()
    {
        m_Events.{name}.Open = true;
    }

    public static void ShowingModal()
    {        
        if (Visible.{name}.IsShow) {
            {root_canvas_group}
            {has_root_mapping}
            
            {canvas_groups}
            {images}
            {texts}
            {buttons}
            {toggles}
            {sliders}
            {inputfields}
            {dragdrop}
            {dropdown}
        }
    }

    public static void UpdatingModal()
    {
        if (m_Events.{name}.Open) {
            Visible.{name} = new VisibleContent.{name}Visible{IsShow = true};
        }
        {additional_events}
        if (m_Events.{name}.Close) {
            Visible.{name} = default;
        }
    }
}